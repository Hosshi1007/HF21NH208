/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.82
 * Generated at: 2023-12-11 02:11:18 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.File;

public final class discovery_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.File");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPではGET、POST、またはHEADのみが許可されます。 JasperはOPTIONSも許可しています。");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
 request.setCharacterEncoding("UTF-8"); 
      out.write('\r');
      out.write('\n');


	int count=1;


      out.write("\r\n");
      out.write("<html lang=\"ja\">\r\n");
      out.write("	<head>\r\n");
      out.write("		<meta charset=\"utf-8\" />\r\n");
      out.write("		<meta name=\"viewport\" content=\"width=device-width\" />\r\n");
      out.write("		<meta name=\"viewport\" content=\"initial-scale=1, viewport-fit=cover\" />\r\n");
      out.write("		<title>Discovery</title>\r\n");
      out.write("		<!-- ブラウザ表示favicon -->\r\n");
      out.write("		<link rel=\"icon\" type=\"image/png\" href=\"icon/icon-16x16.png\" sizes=\"16x16\"/>\r\n");
      out.write("		<!-- iphone表示favicon -->\r\n");
      out.write("		<link rel=\"apple-touch-icon\" href=\"icon/apple-touch-icon.png\" sizes=\"180x180\"/>\r\n");
      out.write("		<!-- CSS -->\r\n");
      out.write("		<link rel=\"stylesheet\" type=\"text/css\" href=\"css/discovery/reset.css\" />\r\n");
      out.write("		<link rel=\"stylesheet\" type=\"text/css\" href=\"css/discovery/format.css\" />\r\n");
      out.write("		<link rel=\"stylesheet\" type=\"text/css\" href=\"css/discovery/discovery.css\" />\r\n");
      out.write("		<link rel=\"stylesheet\" type=\"text/css\" href=\"css/discovery/tab.css\" />\r\n");
      out.write("		<!-- Slick.jsのCSS -->\r\n");
      out.write("		<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick.css\" />\r\n");
      out.write("		<link rel=\"stylesheet\" type=\"text/css\" href=\"css/discovery/slick_my.css\" />\r\n");
      out.write("		<!-- Slick.jsのJS -->\r\n");
      out.write("		<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\r\n");
      out.write("	</head>\r\n");
      out.write("\r\n");
      out.write("	<body>\r\n");
      out.write("		<!--- スマートフォン用タブ--->\r\n");
      out.write("		<header class=\"smart-header\">\r\n");
      out.write("			<div class=\"head\">\r\n");
      out.write("				<form method=\"get\" action=\"results.html\" class=\"search\">\r\n");
      out.write("					<label><input type=\"text\" placeholder=\"気になるワード\" /></label>\r\n");
      out.write("					<button type=\"submit\" aria-label=\"検索\"></button>\r\n");
      out.write("				</form>\r\n");
      out.write("			</div>\r\n");
      out.write("			<div class=\"tabs\">\r\n");
      out.write("				<div class=\"tab-buttons\">\r\n");
      out.write("					<span class=\"content1\" onclick=\"reload()\">画像</span>\r\n");
      out.write("					<span class=\"content2\">文字</span>\r\n");
      out.write("					<div id=\"lamp\" class=\"content1\"></div>\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("		</header>\r\n");
      out.write("\r\n");
      out.write("		<!--スマートフォン用メイン -->\r\n");
      out.write("		<main class=\"smart-main\">\r\n");
      out.write("			<div class=\"tab-content\">\r\n");
      out.write("				<!--写真+文字 -->\r\n");
      out.write("				<div class=\"content1\">\r\n");
      out.write("					<ul class=\"slider-5\" id=\"js-slider-5\">\r\n");
      out.write("\r\n");
      out.write("						");
 for(int i=1;i<6;i++) { 
      out.write("\r\n");
      out.write("							<li><img src=\"image/test_image/img_");
      out.print( i );
      out.write(".jpg\" alt=\"画像読み込みエラー(");
      out.print( i );
      out.write(")\" /></li>\r\n");
      out.write("							");
 System.out.println("img_" + i + ".jpg読み込み"); 
      out.write("\r\n");
      out.write("						");
 } 
      out.write("\r\n");
      out.write("\r\n");
      out.write("					</ul>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div class=\"content2 slyd\">\r\n");
      out.write("					");
 for(count=1;count<6;count++) { 
      out.write("\r\n");
      out.write("						<div class=\"post swipe-item\"><a href=\"wave.html\">sample");
      out.print( count );
      out.write("</a></div>\r\n");
      out.write("					");
 } 
      out.write("\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("\r\n");
      out.write("			<!-- JS -->\r\n");
      out.write("			<script src=\"js/discovery/discovery.js\"></script>\r\n");
      out.write("			<script src=\"js/discovery/tab.js\"></script>\r\n");
      out.write("			<!-- Slick.jsのJS -->\r\n");
      out.write("			<script src=\"https://cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick.min.js\"></script>\r\n");
      out.write("			<script src=\"js/discovery/slick_my.js\"></script>\r\n");
      out.write("			<!-- スライド削除のJS -->\r\n");
      out.write("			<script>\r\n");
      out.write("				var tsJqSwipeX = -1;\r\n");
      out.write("				var tsJqSwipeY = -1;\r\n");
      out.write("				// スワイプ処理\r\n");
      out.write("				$(function () {\r\n");
      out.write("					$(document).on(\"touchstart\", \".swipe-item\", function () {\r\n");
      out.write("						tsJqSwipeX = event.changedTouches[0].pageX;\r\n");
      out.write("						tsJqSwipeY = event.changedTouches[0].pageY;\r\n");
      out.write("					});\r\n");
      out.write("					$(document).on(\"touchend\", \".swipe-item\", function () {\r\n");
      out.write("						tsJqSwipeX = -1;\r\n");
      out.write("						flag = 0;\r\n");
      out.write("					});\r\n");
      out.write("					$(document).on(\"touchmove\", \".swipe-item\", function () {\r\n");
      out.write("						if (Math.abs(event.changedTouches[0].pageY - tsJqSwipeY) > 10)\r\n");
      out.write("							tsJqSwipeX = -1;\r\n");
      out.write("						if (\r\n");
      out.write("							tsJqSwipeX != -1 &&\r\n");
      out.write("							Math.abs(event.changedTouches[0].pageX - tsJqSwipeX) > 35\r\n");
      out.write("						) {\r\n");
      out.write("							tsJqSwipeX = -1;\r\n");
      out.write("							 // スワイプされた時の処理\r\n");
      out.write("							 $(this).css(\"background-color\", \"#cd0000\");\r\n");
      out.write("							 $(this).slideUp(\"slow\");\r\n");
      out.write("							 $(\".slyd\").append('<div class=\"post swipe-item\"><a href=\"wave.html\">sample100</a></div>');\r\n");
      out.write("						}\r\n");
      out.write("					});\r\n");
      out.write("				});\r\n");
      out.write("			</script>\r\n");
      out.write("		</main>\r\n");
      out.write("\r\n");
      out.write("		<!--スマートフォン用ボトムメニュー -->\r\n");
      out.write("		<ul class=\"bottom-menu\">\r\n");
      out.write("			<li><a href=\"/HF21/home.jsp\"><img src=\"/HF21/image/menu1.png\" alt=\"ホーム\"></a></li>\r\n");
      out.write("			<li><a href=\"/HF21/discovery.html\"><img src=\"/HF21/image/menu2.png\" alt=\"検索\"></a></li>\r\n");
      out.write("			<li><a href=\"/HF21/notice.html\"><img src=\"/HF21/image/menu3.png\" alt=\"通知\"></a></li>\r\n");
      out.write("			<li><a href=\"/HF21/dm.html\"><img src=\"/HF21/image/menu4.png\" alt=\"dm\"></a></li>\r\n");
      out.write("			<li><a href=\"/HF21/profile.html\"><img src=\"/HF21/image/menu5.png\" alt=\"プロフィール\"></a></li>\r\n");
      out.write("		</ul>\r\n");
      out.write("\r\n");
      out.write("	</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
